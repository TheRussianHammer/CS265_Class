1.1:
	i. Called encapsultion. Allows interfaces to be extended, improved, an
		replaced without a need to alter the caller
	ii. Necessary, minimalist set of behaviors. Do it once, and do it well,
		otherwise consistency will vary and be difficult to maintain.
	iii. Decrease coupling, minimise side effects, and document known side
		effects. 
	iv. Consistency is key! Define arguments and behaviors to associated
		interfaces consistently.
1.2:
There are several problems identified in the first implementation. Some of
the most blatant are that the program does not handle long input lines, does
not handle embedded quotes, and overwrites input lines.

1.3:
Functions are all delcared static which allows for better abstraction as
each function is only visible to other functions in the same file, max line size is no longer hard
coded as it doubles with with each iteration, function to free variables
when use expires, function to check for end of line properly. Overall much
better as it is more of a implementable library. 

1.4:
Using only the functionality present within the csvgetline2.c file, it would
not be possible to parse two csv files at the same time as there would be
conflicts in storage of parsed data withing the provided variables, as well
as only accepting one file as an argument. If
threading was implemented externally, then multiple files could be parsed at
the same time.

1.5:
It depends on what the definition of parsing multiple files at the same time
is. If the definition is that a cluster of files are parsed in one "main"
call, then yes the C++ version fixes this as the parsing class methods
accept a reference to a string which could contain all of the data from
multiple files. Even still, the parsed data would be contained in the same vector
which would make each files data indistinguishable from one another, unless
some sort of flag was added. If the definition is that multiple files are parsed within
the same time domain, then no the C++ version does not fix this as threading
is not implemented. 

1.6:
No, there are instances where it avoids some basic guidelines. First, the
"split" and "getline" methods relies on global variables. These same methods
overlap. "split" relies on "getline" to update the "line" global.



